************************************************************************
*** EP4CE6_OMDAZZ 1.310  14-Jul-2023 ks
************************************************************************

The Serial Flash Loader is permanently activated without DIPswitch.
LED4 is no longer reserved and can be freely used again.

Architecture subdir 10 has been added with software load_division.fs,
which performs a complete brute force division/multiplication test.
Set compiler switch UN-SIGNED to either true or false. One sweep takes
3-4 hours.

************************************************************************
*** EP4CE6_OMDAZZ 1.300  13-Jul-2023 ks
************************************************************************

The "Serial Flash Loader" (SFL) has been added to the design. If you
turn DIPswitch 4 on, the serial configuration flash will be connected
to JTAG and can be programmed using the quartus programmer and USB-Blaster
after conversion of the .sof configuration file to the .jic format.
Erase/programming activity will be visible on LED4.

+LOOP has been added to forth_lib.fs. It either uses the new (+loop
instruction (with_PLOOP = true) or a high level version together
with the tor_branch instruction for a 3 cycle +LOOP for short loops.

************************************************************************
*** EP4CE6_OMDAZZ 1.200   8-Jul-2023 ks
************************************************************************

A 16b and 32b bits byte addressed version has been added after
massaging SDRAM_4MBx16.vhd sufficiently :)

Under ../vhdl/architecture we now have designs for 16, 27, and 32 bit
cell as well as 16 and 32 bit byte addressed designs.
In order to use any one of these versions, you have to copy the
architecture_pkg and uDatacache files @ ../vhdl/architectures/XX into
the ../vhdl directory. And you have to configure the FPGA using the
uCore_XX.sof file @ ../vhdl/architecture.

************************************************************************
*** EP4CE6_OMDAZZ 1.132  3-Jul-2023 ks
************************************************************************

fpga.vhd: A simple interrupt generator (#i-time) has been added that
   produces an interrupt according to ticks_per_ms in order to create
   interrupt interference while testing the core.

architecture_pkg: The EXTENDED compilation switch has been abandoned.
   Instead, every single elective instruction can be handled
   individually setting new_<opcode> to either true or false. These
   constant definitions are located in architecture_pkg.vhd after the
   table of instructions. This change had ramifications for uCtrl.vhd,
   opcodes.fs, forth_lib.fs, and coretest.fs as well as microcross.fs
   and library.fs.

   Two new instructions have been added:
   op_DIPUSH = [di and op_DIPOP = di], which will efficiently disable
   interrupts for critical code sections. Please note that both ops
   use the returnstack to save and restore the interrupt state before
   executing [di. According changes have been made to uCntrl.vhd and
   opcodes.fs. It has been used first to define a high level version for
   +! in forth_lib.fs, which is needed when new_PLUSST has been set to
   false in architecture_pkg.vhd.

microcross.fs: #registers is a new constant that points at the beginning
   of uCore's register area. See below.

constants.fs: #top is a constant that points past the end of the usable
   external SDRAM memory. In a 16 bit design, this may collide with uCore's
   registers, which are located at the top end of the address space.

************************************************************************
*** EP4CE6_OMDAZZ 1.121 27-Jun-2023 ks
************************************************************************

Three architectures have been defined in ../vhdl/architectures/
for word widths 16, 27, and 32.
Copy the files in these directories into ../vhdl/ depending on which
one you want to use.

SDRAM_4MBx16.vhd: Can now be used for any word width up to 32.
   Max_delay timing constraints have been added in fpga.out.sdc
   for SDRAM memory fetches.

opcodes.fs and forth_lib.fs: +! is no longer an "extended" instruction,
   it is now part of the core wordset.

************************************************************************
*** EP4CE6_OMDAZZ 1.110 27-Jun-2023 ks
************************************************************************

Bugfix in external_SDRAM.vhd row/col addressing.

************************************************************************
*** EP4CE6_OMDAZZ 1.100 24-Jun-2023 ks
************************************************************************

This is no longer an experimental version. Therefore, it only has 4 digits.

This is how the version number is composed as a decimal number:
<major_release> . <added_functionality> <HW_fix> <SW_fix> . <pre-release#>
It can be interactively displayed using "version-reg @ #.".

A PLL has been integrated that produces 100 MHz as system clk to allow
for a fast SDRAM. Please note: The PLL does not correctly simulate
(a Quartus IP bug, which also creates needless warnings during synthesis).
Therefore, the '..._frequency' and 'cycles' parameters have been set
accordingly in architecture_pkg_sim.vhd to run at 100 MHz without PLL,
which will not be generated during SIMULATION (fpga.vhd).

external_SDRAM.vhd is the SDRAM controller that currently only supports
a 16 bit cell addressed system. Other widths as well as byte addressing
will follow soon. SDRAM model MT48LC4M16 from fmf is used for simulation.

I cheated on timing constraints: Rather then setting the "base"
clock to 100 MHz and give all internal uCore transactions 3 cycles to
complete, I specified the clock @ 33.33 MHz. The predicted actual clock
is 36+ MHz. That will do for the moment.

************************************************************************
*** EP4CE6_OMDAZZ 1.000.3 12-Jun-2023 ks
************************************************************************

Now both single and dual port ram is correctly inferred by Altera.

The coretest bug has been fixed. f-bitout will only be used during simulation.

Constant cycles (architecture_pkg.vhd) has been set to 1 and therefore, 
uCore_16 actually executes 50M instructions/second.

************************************************************************
*** EP4CE6_OMDAZZ 1.000.2  9-Jun-2023 ks
************************************************************************

The dual port bram for the data memory has been replaced by a single
port one, namely internal_ram in functions_pkd.vhd.

Altera does not have a global clk_enable signal for its bram but two
independent we_en and rd_en - Intel processor style. Therefore the
entity definition in functions_pkg.vhd has been modified.

This 16 bit design works and would run @ 50 MHz

************************************************************************
*** EP4CE6_OMDAZZ 1.000.1 17-May-2023 ks
************************************************************************

External keys integrated as FLAG_REG inputs.

************************************************************************
*** EP4CE6_OMDAZZ 1.000.0  8-May-2023 ks
************************************************************************

First attempt to get a 16 bit cell addressed uCore running on an
Intel FPGA.

************************************************************************
*** uCore 2.410  10-Nov-2022 ks
************************************************************************

Update of all documents.

architecture_pkg.vhd: reg_addr_width computed automatically from min_registers.

************************************************************************
*** uCore 2.400   3-Nov-2022 ks
************************************************************************

Functional enhancement:
   Byte addressing implemented using constant byte_addr_width. This only
   makes sense for 16 and 32 bit data_width. 
   New instructions when byte_addr_width /= 0: 
   cST (c-STORE), cLD (c-LOAD), c@, wST (w-STORE), wLD (w-LOAD),
   ALIGN, #CELL, CELLS, CELL+, and CELL-.

   See vhdl/architectures for a collection of various architecture_pkg 
   and uDatachache files.

functions_pkg.vhd:
   New internal_dpbram entity defined. Synplify will infer byte 
   addressable dual port memory.
   
Bugfix and changes of uCtrl.vhd:
   Overflow generation of the last signed division step op_SDIVL.
   Now a complete testbench exists for signed and unsigned divison/
   multiplication. On a 10 bit system it takes about 4 hours.
   See: software/test/division directory.   
   -rot, nip, tuck, and under deprecated, because they can be realized 
   as two instruction macros.
   
bench.vhd
   Several bugfixes in the umbilical interface tests.
   
task_lib.fs:
   It has been split into two files: multitask.vhd which can be included
   with definitions that will always be needed. At the very end of 
   multitask.fs, library task_lib.fs will be loaded.

************************************************************************
*** uCore 2.354   4-Jun-2022 ks
************************************************************************

Bugfix in uCtrl:
   dcache was always false when data_addr_width = cache_addr_width
   and therefore, @ and ! would not work.

Bugfix in constant.fs and various .fs files:
   Flag-reg replaced by Flags, Int-reg replaced by Intflags.

Bugfix in microcross.fs:
   Create ... Does> now allows multiple data object definitions.
   Additional data objects can be defined while debugging interactively.

forth_lib.fs, debugger.fs, and messages.fs:
   The target's , moved from forth_lib to debugger and messages and
   therefore, it will be permanently present outside of the library.

************************************************************************
*** uCore 2.342  13-Apr-2022 ks
************************************************************************

Bugfix in semaphor_proc in architecture_pkg.vhd
Moved enable_proc for clk_en generation from uCore.vhd to fpga.vhd
1+ / 1- replaced by cell+ / cell- in various places in preparation
for byte addressed memory.

************************************************************************
*** uCore 2.331   5-Nov-2021 ks
************************************************************************

uCntrl.vhd: Bugfix in 'WHEN op_STORE'. Code for RSP_REG simplified.

uCore.vhd: Bugfix in core.mem_en

debugger.fs: Synchronising Tdp (data memory pointer in the host) and
   Dp (data memory pointer in the target) if the latter has been
   defined.
   Saving/Restoring TOR during breakpoint debugging.
   Order of input-arguments changed for dtarget and udtarget.

library.fs: Major bugfixes. 'preload' added to the wordset in order
   to load a library definition explicitly before using it.

microcross.fs: Data memory initialization optimized by not storing 0.
   This assumes that at first the used data memory is zeroed during
   reset.
   UNTIL will now resolve a preceeding WHILE. (BEGIN .. WHILE .. UNTIL)

task_lib.fs: Bugfix in do-poll.

************************************************************************
*** uCore 2.320   1-Apr-2021 ks
************************************************************************

Rewriting the VHDL code for VHDL-93 instead of VHDL-2008
Some additional modifications to make it synthesizable by XST.

Moving the data cache memory interface from uCore.vhd to fpga.vhd.

architecture_pkg.vhd: New parameters cache_size and prog_size, because
   those may be smaller than 2**cache_addr_width or 2**prog_addr_width
   respectively.

functions_pkg.vhd: All internal memory components now take the actual
   RAM size as generic instead of the addr_width.
   
************************************************************************
*** uCore 2.310  23-Mar-2021 ks
************************************************************************

Architecture_pkg(_sim).vhd: A few renames of constants.
   Both types uBus_port and core_signals now include the full set of
   memory enable signals: reg_en, mem_en, and ext_en.

functions_pkg.vhd: "none" for "no file" replaced by "", the empty
   string.

uCore.vhd: Restructuring memory enable control and rdata source
   selection.

external_SRAM.vhd: Bugfix in data_mux_proc.

extensions.fs: Bugfix in [IF] structure for loading RS232_linux.fs.

************************************************************************
*** uCore 2.300   8-Mar-2021 ks
************************************************************************

Libraries IEEE.STD_LOGIC_SIGNED/UNSIGNED replaced by IEEE.NUMERIC_STD.
ALL STD_LOGIC_VECTOR data types have been replaced by UNSIGNED.
The remaining conversions and casts have been converted to NUMERIc_STD.

In architecture_pkg.vhd and architecture_pkg_sim.vhd:
Compiler switch WITH_PROG_RW eliminated. The program memory can only
be written when simulating or during boot load (warmboot = '0').
It can always be read.

In uCore.vhd: WITH_PROG_RW eliminated.

In uCntrl.vhd: Bugfix in op_PLUSST, op_PLUSST2
   reg_addr now defined as SIGNED(reg_addr_width DOWNTO 0) so that
   it can handle the negatve register addresses.
   uAdd.vhd and uMult.vhd merged into uArithmetic.vhd.

objects.fs: New file with OOP mechanism.
See uForth.pdf chapter 9.5. OOP code integrated into microcross.fs.

In image.fs: CRC-file modified for variable data_width, but at
least 16 bits.

************************************************************************
*** uCore 2.200  21-Jan-2021 ks
************************************************************************

First release on GitHub.

New Version number structure:
<4 digit version>_<2 digit data_width>
<major_release><functionality_added><HW_fix><SW_fix>_<data_width>
Use .version to display while debugging.

In architecture_pkg.vhd and architecture_pkg_sim.vhd:
- Simplification and re-arrangment of the architecture Constants.
- Additional number formats implemented in vhdl.fs e.g. 16#C00#.
- data_nibbles renamed octetts.
- dcache_addr_width renamed cache_addr_width.
- pcache_addr_width deleted, its now always equal to prog_addr_width.
  The notion that there may be external program memory available has
  been given up.

In uCntrl.vhd:
- The return stack may now reside in external memory.
  Its base address is defined by constant addr_rstack.
- op_WLOCAL and op_RLOCAL have been abandoned for op_LOCAL, which
  only computes the absolute memory address from a relative return
  stack addr.
- Overflow bugfix in op_SDIVS.

In constants.fs: Compound names in uForth did use the _ character as
separator. This has been replaced by the - character unless a name has
been imported from VHDL verbatim. Example: #c_bitout renamed #c-bitout.

Library.fs: New file that implements uForth's library mechanism.
See uForth.pdf chapter 9.6 "Libraries". Library code integrated into
microcross.fs.

************************************************************************
*** uCore 2.10  17-Jun-2020 ks
************************************************************************

First release (CERN and DESY).

During documentation, several changes have been made to the design.
And a new version identification when displaying

.version: 2<2-digit-design#>_<data_width> e.g. 210_32

************************************************************************
*** uCore 2.02  07-Jan-2020 ks
************************************************************************

Shift instructions unified:
WITH_MULT: MSHIFT, MASHIFT, WITHOUT_MULT: SHIFT, ASHIFT, C2/, C2*
WITH_TASKS, TASK_REG, tld, t@, tst, and t! eliminated.
Upload bug fixed.
status, dsp, rsp became registers. Special purpose instructions
status@/!, dsp@/!, and rsp@/! eliminated.
+sat instruction added.

************************************************************************
*** uCore 2.01  09-Aug-2019 ks
************************************************************************

Changes made in A3PE_1500_1003 ported back to uCore_2
Floating point ported and included in coretest.fs

************************************************************************
*** uCore 2.00  06-Jun-2019 ks
************************************************************************

Float not yet ported to 2.00
Debugger revisited: Temporary code sequences (without reset) transferred
with program memory cycle stealing.
>FOR <NEXT removed, replaced by ?FOR ... NEXT
Starting uCore 2.00.
At first producing a minimum code version of uCore 1.98.

************************************************************************
*** uCore 1.98  29-Dec-2018 ks
************************************************************************

Changes imported from Merlin Project
